buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

apply plugin: 'org.spongepowered.mixin'

version = "${mc_version}-${mod_version}"
group = package_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_name

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.19.2'

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            jvmArgs '-Xms1G', '-Xmx4G'
            property 'fml.earlyprogresswindow', 'false'
            if (file("src/main/resources/${mod_name}.mixins.json").exists()) {
                arg "-mixin.config=${mod_name}.mixins.json"
            }
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'terminal.ansi', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'mixin.debug.export', 'true'
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            jvmArgs '-Xms1G', '-Xmx4G'
            arg 'nogui'
            if (file("src/main/resources/${mod_name}.mixins.json").exists()) {
                arg "-mixin.config=${mod_name}.mixins.json"
            }
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'terminal.ansi', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'mixin.debug.export', 'true'
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            jvmArgs '-Xms1G', '-Xmx4G'
            if (file("src/main/resources/${mod_name}.mixins.json").exists()) {
                arg "-mixin.config=${mod_name}.mixins.json"
            }
            args '--mod', mod_name, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Data'
            property 'terminal.ansi', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'mixin.debug.export', 'true'
            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/ephys/cookiecore")
        credentials {
            username = project.findProperty("gpr.user") as String ?: System.getenv("GH_MVN_USERNAME")
            password = project.findProperty("gpr.key") as String ?: System.getenv("GH_MVN_PASSWORD")
        }
    }
    maven {
        name "curios"
        url "https://maven.theillusivec4.top/"
    }
    maven {
        url "https://www.cursemaven.com"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.4'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // https://github.com/Ephys/CookieCore/packages/102415
    // You'll need to authenticate to Github Packages
    // See https://docs.github.com/en/packages/guides/configuring-gradle-for-use-with-github-packages#authenticating-to-github-packages
//    implementation fg.deobf('be.ephys.cookiecore:cookiecore:1.18.2-4.0.0-c56fd52')

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.19.2-5.1.2.2:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.19.2-5.1.2.2")
}

mixin {
    if (file("src/main/resources/${mod_name}.mixins.json").exists()) {
        add sourceSets.main, "${mod_name}.refmap.json"
        config "${mod_name}.mixins.json"
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
            "Specification-Title": project.name,
            "Specification-Vendor": "ephys",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor" :"ephys",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
